The function to to lazy fork recursively.

Inorder to minimize the overhead of a potential parallel sequential call, we
do as little work as possible when inserting seeds to the seed stack.

The following example which we use to explain how the code works assumes we
are running on a single core machine with a single thread.

The first lfork will always be a sequential call. But before we call it:
1) We put the sp of the current function frame (assume the compiler uses sp
   to reference local variables stored on the stack) and the address of the
   label from where if any thread wants to steal the second lfork should
   resume, on the seed stack (let's call it "SecondChildSteal").
2) We store all the registers on the stack in a reserved area.

For every several seeds we push to the seed stack, we call "yield", where we:
1) Save the stubBase and registers on the stack.
2) Put the current user thread to the readyQ. The information we need to
   stored in the readyQ includes the sp of current frame and the address of
   the label to resumes (in this case we choose "Resume" as the label name)
3) Change the stack pointer to "system stack".
4) Call "suspend".

In "suspend", we:
1) Check if there is any seed in the seed stack. If so, then we will steal
   the work this seed represents by:
   (1) Change the stack pointer to the sp we put in the seedstack before.
   (2) Change the pc to the pc we put in the seedstack before, where we -->
   (3) Restore the registers which have been stored on the stack. This step
       is necessary because some of the local variables may be stored in
       the registers.
   (4) Change the return address of the first call to "FirstChildDone".
   (5) Change the synchronization counter to be 2.
   (5) Store the registers on the stack in the same reversed area.
   (6) Change the stack pointer to a "system stack".
   (7) Call "stackletFork" with the return address "SecondChildDone", the
       stack pointer of the current function as parameters, the function to
       execute and the paremeter for the function.
2) Check if there is any thread in the readyQ. If so, then we will resume
   the work of this user thread by:
   (1) Change the stack pointer to the sp stored in the readyQ.
   (2) Change the pc to the resume label, where we -->
   (3) Restore the registers and stubBase.
   (4) Dequeue the node in the readyQ.
   (5) Return. By return, we resumes whatever is left before.
3) We do the above in a while(1) loop

In "stackletFork", we:
1) Malloc a "stacklet" and set up the stacklet as following (from high
   memory address to low memory address):
   +----------------+
   | parentStubBase | <-- stubBase points to the top of the stacket
   +----------------+
   | parentSP       | <-- the sp of the parent function frame
   +----------------+
   | parentPC       | <-- where to resume, in this case, "SecondChildDone"
   +----------------+
   | stubRoutine    | <-- deallocate stackframe and goes back to parent
   +----------------+ <-- RSP
2) Then we change the stack pointer to "RSP" as indicated above, move
   parameter to rdi and the jmp to the function to "fork".

Now let's say we finishes executing the second call, we will call "ret" in
the last line of the function. We goes into "stubRoutine" naturally, where:
1) Change the stack pointer to "system stack".
2) Store all the information on the current stub in local variables.
3) Free the stacklet.
4) Restore the parent stub base, parent sp and then goto parent pc.

Now we are back in the parent frame executing from "SecondChildDone". What we
do here is:
1) Restore all the registers (of course).
2) Subtract 1 from the synchronization counter.
3) Check if the synchronization counter is zero. If so, this means the first
   call of fib has already been returned and we can continue the job on this
   stacklet by return from this function. If not, we:
   (1) Change the stack pointer to "system stack".
   (2) Call "suspend".

You know the rest of the story...
